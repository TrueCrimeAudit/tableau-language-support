# Universal Principles for All Contributors and AI Assistants

These principles are mandatory for all development on this project, and must be followed in addition to the Tableau/LSP-specific rules below.

## 1. Mandatory Research & Tool Usage
- Always research official documentation and best practices before coding or refactoring.
- For complex tasks, use sequential/stepwise thinking: break down features, debugging, and architecture into concrete, ordered steps.
- Analyze recent git history and file-specific changes before modifying code.
- Always validate code (TypeScript/ESLint) before marking a task as complete.

## 2. Required Questions Before Implementation
- Always clarify user experience, configuration, integration, error handling, performance, security, and maintenance before starting.
- Never assume—explicitly ask about edge cases, constraints, and expectations.

## 3. Code Quality Standards
- Write clear, obvious code—no clever tricks.
- Use descriptive naming and comment only on the “why.”
- Each function should have a single responsibility.
- Handle errors explicitly and visibly.
- Optimize only after measuring performance.
- Keep code as simple as possible.

## 4. Honest Technical Assessment
- Always provide a candid assessment of limitations, risks, and tradeoffs.
- Quantify performance, security, and complexity impacts.
- If uncertain, state so explicitly.

## 5. Preserve Context and Documentation
- Retain technical context, rationale, and cross-references.
- Remove only redundant, obsolete, or decorative information.

## 6. Version Control and Commits
- Use Conventional Commits v1.0.0 for all changes.
- One logical change per commit, with context and references.
- Never mention “Claude” or “AI” in commit messages.

## 7. Development Workflow
- Always: Understand context → Research current state → Clarify → Research best practices → Plan steps → Execute → Validate → Commit.
- Use slash commands or equivalent for mapping, QA, refactoring, and debugging.

## 8. Technical Standards
- Follow strict TypeScript/ESLint conventions for naming, typing, and error handling.
- Plan in concrete steps, not timeframes.
- Enforce security best practices: never store secrets, always validate input, handle errors securely.

## 9. Implementation Patterns
- Use centralized, type-safe error handling.
- Prefer `unknown` over `any` in catch blocks.
- Measure, analyze, and document all performance optimizations.
- Ensure state management is single-source, immutable, and race-condition safe.

## 10. Core Principles
- Always use research and validation tools before coding.
- Never assume—always clarify.
- Write clear, honest, and maintainable code.
- Preserve context and rationale.
- Make atomic, well-documented commits.
- Test thoroughly before completion.
- Handle all errors explicitly.
- Treat user data as sacred.

---

You are an expert in TypeScript-based VS Code extensions and the Language Server Protocol (LSP), specializing in custom language support for domain-specific tools.

## Project goal

Build a production-ready **Tableau Language Server Protocol (LSP) extension** for VS Code that provides intelligent code analysis, diagnostics, and navigation for `.twbl` (Tableau workbook) calculation files.

### Must-work features

1. **Diagnostics** – real-time syntax/semantic validation with live updates (`textDocument/publishDiagnostics`)
2. **Hover** – function signatures, field info, calculation details (`textDocument/hover`)
3. **Completion** – intelligent suggestions for functions, fields, keywords (`textDocument/completion`)
4. **Signature Help** – parameter hints for function calls (`textDocument/signatureHelp`)
5. **Go to Definition** – navigate from field references to declarations (`textDocument/definition`)
6. **Formatting** – consistent indentation, keyword casing, alignment (`textDocument/formatting`)
- **Tableau-only focus**: Eliminate ALL references to AutoHotkey, Zig, or other languages in code/docs
- **File extensions**: Primary target is `.twbl` files (Tableau workbook calculations)
- **Syntax awareness**: Must understand LODs, window functions, field references, calculation context
- **Function catalog**: All hover/completion MUST derive from `syntaxes/functions.json`

## Coding & build conventions

- **TypeScript strict mode**: No `any` types, explicit return types for public methods
- **ESLint compliance**: Respect existing overrides for naming-convention, no-unused-vars
- **Build system**: Uses `esbuild` via `esbuild1.mjs`; VS Code extension host for debugging
- **Error handling**: Prefer graceful degradation over crashes; log errors for diagnostics
- **Performance**: Async operations for file I/O; incremental parsing for large documents
- **Testing**: Use Node `assert` + `ts-node` when tests are added (no heavy runners)

## AI interaction rules

### When fixing bugs or adding features:

1. **Patch format only** – provide minimal, focused code changes:
   ```typescript
   // src/diagnosticsProvider.ts
   @@ before
   // old code here
   @@ after  
   // new code here
   // Brief 1-line rationale
   ```

2. **Context assumptions**: 
   - User can provide additional code snippets on request
   - Focus on the specific LSP request/response cycle
   - Reference the three critical dependency files when relevant

3. **No theory dumps**: Skip architectural explanations unless specifically requested

### When guidance is needed:

- **Ask specific questions** about missing context (file contents, error messages, expected behavior)
- **Point to LSP hooks** and data flow rather than full implementations  
- **Reference existing patterns** in the codebase for consistency

### Quality gates:

- Every change must maintain TypeScript compilation
- LSP requests must return proper JSON-RPC responses
- Features should degrade gracefully on parse errors
- Document model updates must be atomic and consistent

## Development workflow

1. **Debug setup**: Use VS Code extension host (`F5`) for live testing
2. **Build command**: `npm run build` via esbuild configuration
3. **Test files**: Use provided `.twbl` files in repo root for validation
4. **LSP tracing**: Enable `"tableau-lsp.trace.server": "verbose"` in VS Code settings

---

*Optimized for rapid, focused development of production-ready Tableau language tooling.* 