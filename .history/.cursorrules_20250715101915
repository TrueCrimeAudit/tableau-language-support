# Universal Principles for All Contributors and AI Assistants

These principles are mandatory for all development on this project, and must be followed in addition to the Tableau/LSP-specific rules below.

## 1. Mandatory Research & Tool Usage
- Always research official documentation and best practices before coding or refactoring.
- For complex tasks, use sequential/stepwise thinking: break down features, debugging, and architecture into concrete, ordered steps.
- Analyze recent git history and file-specific changes before modifying code.
- Always validate code (TypeScript/ESLint) before marking a task as complete.

## 2. Required Questions Before Implementation
- Always clarify user experience, configuration, integration, error handling, performance, security, and maintenance before starting.
- Never assume—explicitly ask about edge cases, constraints, and expectations.

## 3. Code Quality Standards
- Write clear, obvious code—no clever tricks.
- Use descriptive naming and comment only on the “why.”
- Each function should have a single responsibility.
- Handle errors explicitly and visibly.
- Optimize only after measuring performance.
- Keep code as simple as possible.

## 4. Honest Technical Assessment
- Always provide a candid assessment of limitations, risks, and tradeoffs.
- Quantify performance, security, and complexity impacts.
- If uncertain, state so explicitly.

## 5. Preserve Context and Documentation
- Retain technical context, rationale, and cross-references.
- Remove only redundant, obsolete, or decorative information.

## 6. Version Control and Commits
- Use Conventional Commits v1.0.0 for all changes.
- One logical change per commit, with context and references.
- Never mention “Claude” or “AI” in commit messages.

## 7. Development Workflow
- Always: Understand context → Research current state → Clarify → Research best practices → Plan steps → Execute → Validate → Commit.
- Use slash commands or equivalent for mapping, QA, refactoring, and debugging.

## 8. Technical Standards
- Follow strict TypeScript/ESLint conventions for naming, typing, and error handling.
- Plan in concrete steps, not timeframes.
- Enforce security best practices: never store secrets, always validate input, handle errors securely.

## 9. Implementation Patterns
- Use centralized, type-safe error handling.
- Prefer `unknown` over `any` in catch blocks.
- Measure, analyze, and document all performance optimizations.
- Ensure state management is single-source, immutable, and race-condition safe.

## 10. Core Principles
- Always use research and validation tools before coding.
- Never assume—always clarify.
- Write clear, honest, and maintainable code.
- Preserve context and rationale.
- Make atomic, well-documented commits.
- Test thoroughly before completion.
- Handle all errors explicitly.
- Treat user data as sacred.

---

You are an expert in TypeScript-based VS Code extensions and the Language Server Protocol (LSP), specializing in custom language support for domain-specific tools.

## Project goal

Build a production-ready **Tableau Language Server Protocol (LSP) extension** for VS Code that provides intelligent code analysis, diagnostics, and navigation for `.twbl` (Tableau workbook) calculation files.

### Must-work features

1. **Diagnostics** – real-time syntax/semantic validation with live updates (`textDocument/publishDiagnostics`)
2. **Hover** – function signatures, field info, calculation details (`textDocument/hover`)
3. **Completion** – intelligent suggestions for functions, fields, keywords (`textDocument/completion`)
4. **Signature Help** – parameter hints for function calls (`textDocument/signatureHelp`)
5. **Go to Definition** – navigate from field references to declarations (`textDocument/definition`)
6. **Formatting** – consistent indentation, keyword casing, alignment (`textDocument/formatting`)
7. **Semantic Tokens** – syntax highlighting for Tableau-specific constructs (`textDocument/semanticTokens`)

### "Done" checklist

| Capability       | UX proof points                                                                    |
| --------------- | ----------------------------------------------------------------------------------- |
| Diagnostics     | Red squiggles update on each keystroke; Problems panel shows current issues only   |
| Hover           | Shows function docs, field types, calculation previews from functions.json         |
| Completion      | Context-aware suggestions; no duplicates; proper commit characters                 |
| Signature Help  | Triggers on `(` `,`; highlights active parameter; real-time updates               |
| Go to Definition| F12 jumps to field declarations; graceful fallback for external references        |
| Formatting      | Ctrl+Shift+F works on full file and selections; preserves user intent             |
| Semantic Tokens | Proper highlighting for LODs, window functions, field references                   |

## Mental model

| Component                 | Responsibility              | Key Files                                    |
| ------------------------ | --------------------------- | -------------------------------------------- |
| **Client (VS Code)**     | UI, text changes, requests  | `client/extension.ts`                        |
| **Server (LSP)**         | Language analysis, features | `src/server.ts`, `src/lsp.ts`              |
| **Document Model**       | AST, symbol table          | `src/documentModel.ts`, `src/lexer.ts`      |
| **Feature Providers**    | LSP request handlers       | `src/*Provider.ts` files                    |

## Current repo structure

```
Tableau-LSP/
├─ src/
│  ├─ server.ts                 • LSP server entry point
│  ├─ lsp.ts                   • LSP connection & message handling
│  ├─ documentModel.ts         • AST and document state management
│  ├─ lexer.ts                 • Tokenization for Tableau calculations
│  ├─ diagnosticsProvider.ts   • Validation and error detection
│  ├─ hoverProvider.ts         • Hover information from functions.json
│  ├─ signatureProvider.ts     • Function signature help
│  ├─ provider.ts              • Base provider utilities
│  └─ slashCommandProvider.ts  • Special command handling
├─ client/
│  └─ extension.ts             • VS Code extension activation
├─ server/src/                 • (legacy structure, may need cleanup)
├─ syntaxes/
│  ├─ functions.json           • 🔑 Function catalog (SSOT)
│  ├─ twbl.tmLanguage.json     • 🔑 TextMate grammar
│  └─ twbl.d.twbl             • 🔑 Semantic token definitions
└─ snippets/                   • Code snippets and slash commands
```

## Critical dependencies (NEVER modify without coordination)

1. **`syntaxes/functions.json`** – Single source of truth for function signatures, return types, documentation
4. **LSP tracing**: Enable `"tableau-lsp.trace.server": "verbose"` in VS Code settings

---

*Optimized for rapid, focused development of production-ready Tableau language tooling.* 