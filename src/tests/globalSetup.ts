// src/tests/globalSetup.ts\n\nimport * as fs from 'fs';\nimport * as path from 'path';\n\n/**\n * Global setup for all tests\n * This runs once before all test suites\n */\nexport default async function globalSetup(): Promise<void> {\n    console.log('üöÄ Starting Tableau LSP Test Suite');\n    \n    // Create test results directory\n    const testResultsDir = path.join(__dirname, '../../test-results');\n    if (!fs.existsSync(testResultsDir)) {\n        fs.mkdirSync(testResultsDir, { recursive: true });\n    }\n    \n    // Create coverage directory\n    const coverageDir = path.join(__dirname, '../../coverage');\n    if (!fs.existsSync(coverageDir)) {\n        fs.mkdirSync(coverageDir, { recursive: true });\n    }\n    \n    // Set up test environment variables\n    process.env.NODE_ENV = 'test';\n    process.env.TEST_TIMEOUT = '10000';\n    \n    // Initialize test fixtures\n    await setupTestFixtures();\n    \n    // Log test configuration\n    console.log('üìã Test Configuration:');\n    console.log(`  - Node Environment: ${process.env.NODE_ENV}`);\n    console.log(`  - Test Timeout: ${process.env.TEST_TIMEOUT}ms`);\n    console.log(`  - Coverage Directory: ${coverageDir}`);\n    console.log(`  - Results Directory: ${testResultsDir}`);\n    \n    console.log('‚úÖ Global setup completed');\n}\n\n/**\n * Set up test fixtures and mock data\n */\nasync function setupTestFixtures(): Promise<void> {\n    const fixturesDir = path.join(__dirname, 'fixtures');\n    \n    if (!fs.existsSync(fixturesDir)) {\n        fs.mkdirSync(fixturesDir, { recursive: true });\n    }\n    \n    // Create mock field definitions file\n    const mockFieldDefinitions = `\n        // Mock field definitions for testing\n        [Sales] : Number // Total sales amount in USD\n        [Profit] : Number // Profit margin\n        [Customer Name] : String // Name of the customer\n        [Order Date] : Date // Date when order was placed\n        [Category] : String // Product category\n        [Sub-Category] : String // Product sub-category\n        [Region] : String // Geographic region\n        [Quantity] : Number // Quantity ordered\n        [Discount] : Number // Discount percentage\n        [Ship Mode] : String // Shipping method\n        [Product Name] : String // Name of the product\n        [Order ID] : String // Unique order identifier\n        [Customer ID] : String // Unique customer identifier\n        [Segment] : String // Customer segment\n        [Country] : String // Country name\n        [City] : String // City name\n        [State] : String // State or province\n        [Postal Code] : String // Postal or ZIP code\n        [Ship Date] : Date // Date when order was shipped\n        [Revenue] : Number // Total revenue\n    `;\n    \n    const fieldsPath = path.join(fixturesDir, 'fields.d.twbl');\n    fs.writeFileSync(fieldsPath, mockFieldDefinitions, 'utf8');\n    \n    // Create mock function definitions\n    const mockFunctionDefinitions = {\n        functions: [\n            {\n                name: 'SUM',\n                category: 'Aggregate',\n                description: 'Returns the sum of all values in the expression',\n                syntax: 'SUM(expression)',\n                parameters: [\n                    {\n                        name: 'expression',\n                        type: 'Number',\n                        description: 'The expression to sum'\n                    }\n                ],\n                returnType: 'Number',\n                examples: ['SUM([Sales])', 'SUM([Profit] * [Quantity])']\n            },\n            {\n                name: 'AVG',\n                category: 'Aggregate',\n                description: 'Returns the average of all values in the expression',\n                syntax: 'AVG(expression)',\n                parameters: [\n                    {\n                        name: 'expression',\n                        type: 'Number',\n                        description: 'The expression to average'\n                    }\n                ],\n                returnType: 'Number',\n                examples: ['AVG([Sales])', 'AVG([Profit])']\n            },\n            {\n                name: 'COUNT',\n                category: 'Aggregate',\n                description: 'Returns the count of items in the group',\n                syntax: 'COUNT(expression)',\n                parameters: [\n                    {\n                        name: 'expression',\n                        type: 'Any',\n                        description: 'The expression to count'\n                    }\n                ],\n                returnType: 'Number',\n                examples: ['COUNT([Orders])', 'COUNT(DISTINCT [Customer ID])']\n            },\n            {\n                name: 'LEFT',\n                category: 'String',\n                description: 'Returns the leftmost number of characters in the string',\n                syntax: 'LEFT(string, number)',\n                parameters: [\n                    {\n                        name: 'string',\n                        type: 'String',\n                        description: 'The string to extract from'\n                    },\n                    {\n                        name: 'number',\n                        type: 'Number',\n                        description: 'The number of characters to extract'\n                    }\n                ],\n                returnType: 'String',\n                examples: ['LEFT([Customer Name], 5)', 'LEFT(\"Hello World\", 5)']\n            },\n            {\n                name: 'DATEADD',\n                category: 'Date',\n                description: 'Adds a specified number of date parts to a date',\n                syntax: 'DATEADD(date_part, interval, date)',\n                parameters: [\n                    {\n                        name: 'date_part',\n                        type: 'String',\n                        description: 'The part of the date to add to (year, month, day, etc.)'\n                    },\n                    {\n                        name: 'interval',\n                        type: 'Number',\n                        description: 'The number of date parts to add'\n                    },\n                    {\n                        name: 'date',\n                        type: 'Date',\n                        description: 'The date to add to'\n                    }\n                ],\n                returnType: 'Date',\n                examples: ['DATEADD(\\'month\\', 1, [Order Date])', 'DATEADD(\\'year\\', -1, TODAY())']\n            }\n        ]\n    };\n    \n    const functionsPath = path.join(fixturesDir, 'functions.json');\n    fs.writeFileSync(functionsPath, JSON.stringify(mockFunctionDefinitions, null, 2), 'utf8');\n    \n    // Create sample test documents\n    const sampleDocuments = {\n        simple: 'SUM([Sales])',\n        complex: `\n            IF [Sales] > 1000 THEN\n                CASE [Category]\n                    WHEN \"Furniture\" THEN [Sales] * 0.1\n                    WHEN \"Technology\" THEN [Sales] * 0.15\n                    ELSE [Sales] * 0.05\n                END\n            ELSE\n                [Sales] * 0.02\n            END\n        `,\n        lod: '{ FIXED [Region] : SUM([Sales]) }',\n        nested: 'ROUND(SUM(AVG([Sales])), 2)',\n        malformed: 'IF [Sales] > 100 THEN THEN ELSE',\n        withComments: `\n            // Calculate profit margin\n            SUM([Profit]) / SUM([Sales]) // Profit ratio\n        `\n    };\n    \n    const documentsPath = path.join(fixturesDir, 'sampleDocuments.json');\n    fs.writeFileSync(documentsPath, JSON.stringify(sampleDocuments, null, 2), 'utf8');\n    \n    console.log('üìÅ Test fixtures created successfully');\n}\n"