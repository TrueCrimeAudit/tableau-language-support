// src/tests/unit/conditionalExpressionValidator.test.ts\n\nimport { TextDocument } from 'vscode-languageserver-textdocument';\nimport { validateConditionalExpression } from '../../conditionalExpressionValidator';\nimport { parseDocument } from '../../documentModel';\n\ndescribe('Conditional Expression Validator', () => {\n    function createTestDocument(content: string): TextDocument {\n        return TextDocument.create('test://test.twbl', 'tableau', 1, content);\n    }\n\n    describe('IF Statement Validation', () => {\n        it('should validate simple IF statements', () => {\n            const document = createTestDocument('IF [Sales] > 100 THEN \"High\" ELSE \"Low\" END');\n            const parsed = parseDocument(document);\n            \n            const validation = validateConditionalExpression(parsed.symbols[0], document);\n            \n            expect(validation.isValid).toBe(true);\n            expect(validation.errors).toHaveLength(0);\n        });\n\n        it('should detect missing THEN keyword', () => {\n            const document = createTestDocument('IF [Sales] > 100 \"High\" ELSE \"Low\" END');\n            const parsed = parseDocument(document);\n            \n            const validation = validateConditionalExpression(parsed.symbols[0], document);\n            \n            expect(validation.isValid).toBe(false);\n            expect(validation.errors.some(e => e.message.includes('THEN'))).toBe(true);\n        });\n\n        it('should detect missing ELSE keyword', () => {\n            const document = createTestDocument('IF [Sales] > 100 THEN \"High\" \"Low\" END');\n            const parsed = parseDocument(document);\n            \n            const validation = validateConditionalExpression(parsed.symbols[0], document);\n            \n            expect(validation.isValid).toBe(false);\n            expect(validation.errors.some(e => e.message.includes('ELSE'))).toBe(true);\n        });\n\n        it('should detect missing END keyword', () => {\n            const document = createTestDocument('IF [Sales] > 100 THEN \"High\" ELSE \"Low\"');\n            const parsed = parseDocument(document);\n            \n            const validation = validateConditionalExpression(parsed.symbols[0], document);\n            \n            expect(validation.isValid).toBe(false);\n            expect(validation.errors.some(e => e.message.includes('END'))).toBe(true);\n        });\n\n        it('should validate nested IF statements', () => {\n            const document = createTestDocument(`\n                IF [Sales] > 100 THEN\n                    IF [Profit] > 50 THEN \"High Profit\" ELSE \"Low Profit\" END\n                ELSE\n                    \"Low Sales\"\n                END\n            `);\n            const parsed = parseDocument(document);\n            \n            const validation = validateConditionalExpression(parsed.symbols[0], document);\n            \n            expect(validation.isValid).toBe(true);\n            expect(validation.errors).toHaveLength(0);\n        });\n\n        it('should detect unbalanced nested IF statements', () => {\n            const document = createTestDocument(`\n                IF [Sales] > 100 THEN\n                    IF [Profit] > 50 THEN \"High Profit\" ELSE \"Low Profit\"\n                ELSE\n                    \"Low Sales\"\n                END\n            `);\n            const parsed = parseDocument(document);\n            \n            const validation = validateConditionalExpression(parsed.symbols[0], document);\n            \n            expect(validation.isValid).toBe(false);\n            expect(validation.errors.some(e => e.message.includes('END'))).toBe(true);\n        });\n    });\n\n    describe('CASE Statement Validation', () => {\n        it('should validate simple CASE statements', () => {\n            const document = createTestDocument(`\n                CASE [Category]\n                    WHEN 'Furniture' THEN 'F'\n                    WHEN 'Technology' THEN 'T'\n                    ELSE 'O'\n                END\n            `);\n            const parsed = parseDocument(document);\n            \n            const validation = validateConditionalExpression(parsed.symbols[0], document);\n            \n            expect(validation.isValid).toBe(true);\n            expect(validation.errors).toHaveLength(0);\n        });\n\n        it('should detect missing WHEN clauses', () => {\n            const document = createTestDocument(`\n                CASE [Category]\n                    'Furniture' THEN 'F'\n                    ELSE 'O'\n                END\n            `);\n            const parsed = parseDocument(document);\n            \n            const validation = validateConditionalExpression(parsed.symbols[0], document);\n            \n            expect(validation.isValid).toBe(false);\n            expect(validation.errors.some(e => e.message.includes('WHEN'))).toBe(true);\n        });\n\n        it('should detect missing THEN in WHEN clauses', () => {\n            const document = createTestDocument(`\n                CASE [Category]\n                    WHEN 'Furniture' 'F'\n                    ELSE 'O'\n                END\n            `);\n            const parsed = parseDocument(document);\n            \n            const validation = validateConditionalExpression(parsed.symbols[0], document);\n            \n            expect(validation.isValid).toBe(false);\n            expect(validation.errors.some(e => e.message.includes('THEN'))).toBe(true);\n        });\n\n        it('should validate CASE without ELSE clause', () => {\n            const document = createTestDocument(`\n                CASE [Category]\n                    WHEN 'Furniture' THEN 'F'\n                    WHEN 'Technology' THEN 'T'\n                END\n            `);\n            const parsed = parseDocument(document);\n            \n            const validation = validateConditionalExpression(parsed.symbols[0], document);\n            \n            expect(validation.isValid).toBe(true);\n            expect(validation.warnings.some(w => w.message.includes('ELSE'))).toBe(true);\n        });\n\n        it('should validate nested CASE statements', () => {\n            const document = createTestDocument(`\n                CASE [Category]\n                    WHEN 'Furniture' THEN\n                        CASE [Sub-Category]\n                            WHEN 'Chairs' THEN 'C'\n                            ELSE 'F'\n                        END\n                    ELSE 'O'\n                END\n            `);\n            const parsed = parseDocument(document);\n            \n            const validation = validateConditionalExpression(parsed.symbols[0], document);\n            \n            expect(validation.isValid).toBe(true);\n            expect(validation.errors).toHaveLength(0);\n        });\n    });\n\n    describe('ELSEIF Statement Validation', () => {\n        it('should validate IF with ELSEIF statements', () => {\n            const document = createTestDocument(`\n                IF [Sales] > 1000 THEN \"Excellent\"\n                ELSEIF [Sales] > 500 THEN \"Good\"\n                ELSEIF [Sales] > 100 THEN \"Average\"\n                ELSE \"Poor\"\n                END\n            `);\n            const parsed = parseDocument(document);\n            \n            const validation = validateConditionalExpression(parsed.symbols[0], document);\n            \n            expect(validation.isValid).toBe(true);\n            expect(validation.errors).toHaveLength(0);\n        });\n\n        it('should detect missing THEN in ELSEIF', () => {\n            const document = createTestDocument(`\n                IF [Sales] > 1000 THEN \"Excellent\"\n                ELSEIF [Sales] > 500 \"Good\"\n                ELSE \"Poor\"\n                END\n            `);\n            const parsed = parseDocument(document);\n            \n            const validation = validateConditionalExpression(parsed.symbols[0], document);\n            \n            expect(validation.isValid).toBe(false);\n            expect(validation.errors.some(e => e.message.includes('THEN'))).toBe(true);\n        });\n\n        it('should validate complex nested ELSEIF', () => {\n            const document = createTestDocument(`\n                IF [Region] = 'North' THEN\n                    IF [Sales] > 100 THEN \"High North\"\n                    ELSEIF [Sales] > 50 THEN \"Medium North\"\n                    ELSE \"Low North\"\n                    END\n                ELSEIF [Region] = 'South' THEN \"South\"\n                ELSE \"Other\"\n                END\n            `);\n            const parsed = parseDocument(document);\n            \n            const validation = validateConditionalExpression(parsed.symbols[0], document);\n            \n            expect(validation.isValid).toBe(true);\n            expect(validation.errors).toHaveLength(0);\n        });\n    });\n\n    describe('Expression Context Validation', () => {\n        it('should validate boolean expressions in conditions', () => {\n            const document = createTestDocument('IF [Sales] > 100 AND [Profit] > 50 THEN \"Good\" ELSE \"Bad\" END');\n            const parsed = parseDocument(document);\n            \n            const validation = validateConditionalExpression(parsed.symbols[0], document);\n            \n            expect(validation.isValid).toBe(true);\n            expect(validation.errors).toHaveLength(0);\n        });\n\n        it('should detect invalid condition expressions', () => {\n            const document = createTestDocument('IF [Sales] THEN \"Good\" ELSE \"Bad\" END');\n            const parsed = parseDocument(document);\n            \n            const validation = validateConditionalExpression(parsed.symbols[0], document);\n            \n            expect(validation.isValid).toBe(false);\n            expect(validation.errors.some(e => e.message.includes('boolean'))).toBe(true);\n        });\n\n        it('should validate field references in conditions', () => {\n            const document = createTestDocument('IF [Unknown Field] > 100 THEN \"High\" ELSE \"Low\" END');\n            const parsed = parseDocument(document);\n            \n            const validation = validateConditionalExpression(parsed.symbols[0], document);\n            \n            expect(validation.warnings.some(w => w.message.includes('Unknown Field'))).toBe(true);\n        });\n\n        it('should validate function calls in conditions', () => {\n            const document = createTestDocument('IF SUM([Sales]) > 1000 THEN \"High\" ELSE \"Low\" END');\n            const parsed = parseDocument(document);\n            \n            const validation = validateConditionalExpression(parsed.symbols[0], document);\n            \n            expect(validation.isValid).toBe(true);\n            expect(validation.errors).toHaveLength(0);\n        });\n    });\n\n    describe('Error Recovery and Suggestions', () => {\n        it('should provide helpful error messages', () => {\n            const document = createTestDocument('IF [Sales] > 100 \"High\" ELSE \"Low\" END');\n            const parsed = parseDocument(document);\n            \n            const validation = validateConditionalExpression(parsed.symbols[0], document);\n            \n            expect(validation.isValid).toBe(false);\n            const thenError = validation.errors.find(e => e.message.includes('THEN'));\n            expect(thenError).toBeDefined();\n            expect(thenError?.suggestion).toContain('Add THEN keyword');\n        });\n\n        it('should suggest fixes for common mistakes', () => {\n            const document = createTestDocument('IF [Sales] > 100 THEN \"High\" \"Low\" END');\n            const parsed = parseDocument(document);\n            \n            const validation = validateConditionalExpression(parsed.symbols[0], document);\n            \n            expect(validation.isValid).toBe(false);\n            const elseError = validation.errors.find(e => e.message.includes('ELSE'));\n            expect(elseError?.suggestion).toContain('Add ELSE keyword');\n        });\n\n        it('should provide context-aware suggestions', () => {\n            const document = createTestDocument(`\n                CASE [Category]\n                    WHEN 'Furniture' THEN 'F'\n                    'Technology' THEN 'T'\n                END\n            `);\n            const parsed = parseDocument(document);\n            \n            const validation = validateConditionalExpression(parsed.symbols[0], document);\n            \n            expect(validation.isValid).toBe(false);\n            const whenError = validation.errors.find(e => e.message.includes('WHEN'));\n            expect(whenError?.suggestion).toContain('Add WHEN keyword');\n        });\n\n        it('should handle incomplete expressions gracefully', () => {\n            const document = createTestDocument('IF [Sales] > 100 THEN');\n            const parsed = parseDocument(document);\n            \n            const validation = validateConditionalExpression(parsed.symbols[0], document);\n            \n            expect(validation.isValid).toBe(false);\n            expect(validation.errors.some(e => e.message.includes('incomplete'))).toBe(true);\n        });\n    });\n\n    describe('Performance and Edge Cases', () => {\n        it('should handle very deeply nested expressions', () => {\n            let deepExpression = 'IF [A] > 1 THEN ';\n            for (let i = 0; i < 20; i++) {\n                deepExpression += `IF [B${i}] > ${i} THEN `;\n            }\n            deepExpression += '\"Deep\" ';\n            for (let i = 0; i < 20; i++) {\n                deepExpression += 'ELSE \"Shallow\" END ';\n            }\n            deepExpression += 'ELSE \"Top\" END';\n            \n            const document = createTestDocument(deepExpression);\n            const parsed = parseDocument(document);\n            \n            const startTime = Date.now();\n            const validation = validateConditionalExpression(parsed.symbols[0], document);\n            const duration = Date.now() - startTime;\n            \n            expect(duration).toBeLessThan(1000); // Should complete within 1 second\n            expect(validation.isValid).toBe(true);\n        });\n\n        it('should handle malformed expressions without crashing', () => {\n            const malformedExpressions = [\n                'IF THEN ELSE END',\n                'CASE WHEN THEN END',\n                'IF [Sales] THEN THEN ELSE END',\n                'CASE [Category] WHEN WHEN THEN END',\n                'IF [Sales] > THEN \"High\" ELSE \"Low\" END'\n            ];\n            \n            malformedExpressions.forEach(expr => {\n                const document = createTestDocument(expr);\n                const parsed = parseDocument(document);\n                \n                expect(() => {\n                    const validation = validateConditionalExpression(parsed.symbols[0], document);\n                    expect(validation.isValid).toBe(false);\n                }).not.toThrow();\n            });\n        });\n\n        it('should handle empty or null expressions', () => {\n            const document = createTestDocument('');\n            const parsed = parseDocument(document);\n            \n            expect(() => {\n                const validation = validateConditionalExpression(null as any, document);\n                expect(validation.isValid).toBe(false);\n            }).not.toThrow();\n        });\n\n        it('should validate expressions with comments', () => {\n            const document = createTestDocument(`\n                // Check sales performance\n                IF [Sales] > 100 THEN // High sales\n                    \"High\"\n                ELSE // Low sales\n                    \"Low\"\n                END\n            `);\n            const parsed = parseDocument(document);\n            \n            const validation = validateConditionalExpression(parsed.symbols[0], document);\n            \n            expect(validation.isValid).toBe(true);\n            expect(validation.errors).toHaveLength(0);\n        });\n    });\n});\n"