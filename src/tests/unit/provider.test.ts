// src/tests/unit/provider.test.ts\n\nimport { TextDocument } from 'vscode-languageserver-textdocument';\nimport { Position, DocumentSymbolParams, WorkspaceSymbolParams, CodeActionParams, DefinitionParams, ReferenceParams } from 'vscode-languageserver';\nimport { documentSymbolProvider, workspaceSymbolProvider, provideCodeActions, provideDefinition, provideReferences } from '../../provider';\nimport { parsedDocumentCache } from '../../common';\nimport { IncrementalParser } from '../../incrementalParser';\n\ndescribe('Provider Module', () => {\n    function createTestDocument(content: string, uri: string = 'test://test.twbl'): TextDocument {\n        return TextDocument.create(uri, 'tableau', 1, content);\n    }\n\n    beforeEach(() => {\n        parsedDocumentCache.clear();\n    });\n\n    describe('Document Symbol Provider', () => {\n        it('should provide symbols for simple expressions', async () => {\n            const document = createTestDocument('SUM([Sales])');\n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const params: DocumentSymbolParams = {\n                textDocument: { uri: document.uri }\n            };\n            \n            const symbols = await documentSymbolProvider(params, undefined as any);\n            \n            expect(symbols).toBeDefined();\n            expect(Array.isArray(symbols)).toBe(true);\n            expect(symbols.length).toBeGreaterThan(0);\n        });\n\n        it('should provide symbols for complex IF expressions', async () => {\n            const document = createTestDocument(`\n                IF [Sales] > 100 THEN\n                    \"High Sales\"\n                ELSEIF [Sales] > 50 THEN\n                    \"Medium Sales\"\n                ELSE\n                    \"Low Sales\"\n                END\n            `);\n            \n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const params: DocumentSymbolParams = {\n                textDocument: { uri: document.uri }\n            };\n            \n            const symbols = await documentSymbolProvider(params, undefined as any);\n            \n            expect(symbols).toBeDefined();\n            expect(symbols.length).toBeGreaterThan(0);\n            \n            // Should contain IF symbol\n            const symbolNames = symbols.map(s => s.name);\n            expect(symbolNames.some(name => name.includes('IF'))).toBe(true);\n        });\n\n        it('should provide symbols for CASE expressions', async () => {\n            const document = createTestDocument(`\n                CASE [Category]\n                    WHEN 'Furniture' THEN 'F'\n                    WHEN 'Technology' THEN 'T'\n                    ELSE 'O'\n                END\n            `);\n            \n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const params: DocumentSymbolParams = {\n                textDocument: { uri: document.uri }\n            };\n            \n            const symbols = await documentSymbolProvider(params, undefined as any);\n            \n            expect(symbols).toBeDefined();\n            expect(symbols.length).toBeGreaterThan(0);\n        });\n\n        it('should provide symbols for LOD expressions', async () => {\n            const document = createTestDocument('{ FIXED [Region] : SUM([Sales]) }');\n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const params: DocumentSymbolParams = {\n                textDocument: { uri: document.uri }\n            };\n            \n            const symbols = await documentSymbolProvider(params, undefined as any);\n            \n            expect(symbols).toBeDefined();\n            expect(symbols.length).toBeGreaterThan(0);\n        });\n\n        it('should handle empty documents', async () => {\n            const document = createTestDocument('');\n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const params: DocumentSymbolParams = {\n                textDocument: { uri: document.uri }\n            };\n            \n            const symbols = await documentSymbolProvider(params, undefined as any);\n            \n            expect(symbols).toBeDefined();\n            expect(Array.isArray(symbols)).toBe(true);\n        });\n    });\n\n    describe('Workspace Symbol Provider', () => {\n        it('should provide workspace symbols for query', async () => {\n            // Set up multiple documents in cache\n            const doc1 = createTestDocument('SUM([Sales])', 'test://doc1.twbl');\n            const doc2 = createTestDocument('AVG([Profit])', 'test://doc2.twbl');\n            \n            IncrementalParser.parseDocumentIncremental(doc1);\n            IncrementalParser.parseDocumentIncremental(doc2);\n            \n            const params: WorkspaceSymbolParams = {\n                query: 'SUM'\n            };\n            \n            const symbols = await workspaceSymbolProvider(params, undefined as any);\n            \n            expect(symbols).toBeDefined();\n            expect(Array.isArray(symbols)).toBe(true);\n        });\n\n        it('should filter symbols by query', async () => {\n            const document = createTestDocument('SUM([Sales]) + AVG([Profit])');\n            IncrementalParser.parseDocumentIncremental(document);\n            \n            const params: WorkspaceSymbolParams = {\n                query: 'SUM'\n            };\n            \n            const symbols = await workspaceSymbolProvider(params, undefined as any);\n            \n            expect(symbols).toBeDefined();\n            // Should filter to only SUM-related symbols\n        });\n\n        it('should handle empty query', async () => {\n            const document = createTestDocument('SUM([Sales])');\n            IncrementalParser.parseDocumentIncremental(document);\n            \n            const params: WorkspaceSymbolParams = {\n                query: ''\n            };\n            \n            const symbols = await workspaceSymbolProvider(params, undefined as any);\n            \n            expect(symbols).toBeDefined();\n            expect(Array.isArray(symbols)).toBe(true);\n        });\n    });\n\n    describe('Code Actions Provider', () => {\n        it('should provide code actions for syntax errors', async () => {\n            const document = createTestDocument('IF [Sales] > 100 THEN \"High\" ELSE \"Low\"'); // Missing END\n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const params: CodeActionParams = {\n                textDocument: { uri: document.uri },\n                range: {\n                    start: { line: 0, character: 0 },\n                    end: { line: 0, character: 40 }\n                },\n                context: {\n                    diagnostics: []\n                }\n            };\n            \n            const actions = await provideCodeActions(params, document);\n            \n            expect(actions).toBeDefined();\n            expect(Array.isArray(actions)).toBe(true);\n        });\n\n        it('should provide quick fixes for common issues', async () => {\n            const document = createTestDocument('SUM([Sales] +'); // Incomplete expression\n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const params: CodeActionParams = {\n                textDocument: { uri: document.uri },\n                range: {\n                    start: { line: 0, character: 0 },\n                    end: { line: 0, character: 14 }\n                },\n                context: {\n                    diagnostics: []\n                }\n            };\n            \n            const actions = await provideCodeActions(params, document);\n            \n            expect(actions).toBeDefined();\n            expect(Array.isArray(actions)).toBe(true);\n        });\n\n        it('should provide refactoring actions', async () => {\n            const document = createTestDocument('IF [Sales] > 100 THEN \"High\" ELSE \"Low\" END');\n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const params: CodeActionParams = {\n                textDocument: { uri: document.uri },\n                range: {\n                    start: { line: 0, character: 0 },\n                    end: { line: 0, character: 44 }\n                },\n                context: {\n                    diagnostics: []\n                }\n            };\n            \n            const actions = await provideCodeActions(params, document);\n            \n            expect(actions).toBeDefined();\n            expect(Array.isArray(actions)).toBe(true);\n        });\n\n        it('should handle empty range', async () => {\n            const document = createTestDocument('SUM([Sales])');\n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const params: CodeActionParams = {\n                textDocument: { uri: document.uri },\n                range: {\n                    start: { line: 0, character: 0 },\n                    end: { line: 0, character: 0 }\n                },\n                context: {\n                    diagnostics: []\n                }\n            };\n            \n            const actions = await provideCodeActions(params, document);\n            \n            expect(actions).toBeDefined();\n            expect(Array.isArray(actions)).toBe(true);\n        });\n    });\n\n    describe('Definition Provider', () => {\n        it('should provide definition for function calls', async () => {\n            const document = createTestDocument('SUM([Sales])');\n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const params: DefinitionParams = {\n                textDocument: { uri: document.uri },\n                position: { line: 0, character: 1 } // On 'SUM'\n            };\n            \n            const definition = await provideDefinition(params, document);\n            \n            expect(definition).toBeDefined();\n        });\n\n        it('should provide definition for field references', async () => {\n            const document = createTestDocument('[Sales]');\n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const params: DefinitionParams = {\n                textDocument: { uri: document.uri },\n                position: { line: 0, character: 2 } // Inside [Sales]\n            };\n            \n            const definition = await provideDefinition(params, document);\n            \n            expect(definition).toBeDefined();\n        });\n\n        it('should handle positions with no definitions', async () => {\n            const document = createTestDocument('SUM([Sales])');\n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const params: DefinitionParams = {\n                textDocument: { uri: document.uri },\n                position: { line: 0, character: 5 } // On parenthesis\n            };\n            \n            const definition = await provideDefinition(params, document);\n            \n            // Should handle gracefully\n            expect(definition).toBeDefined();\n        });\n\n        it('should handle positions outside document bounds', async () => {\n            const document = createTestDocument('SUM([Sales])');\n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const params: DefinitionParams = {\n                textDocument: { uri: document.uri },\n                position: { line: 10, character: 100 } // Way outside bounds\n            };\n            \n            const definition = await provideDefinition(params, document);\n            \n            expect(definition).toBeDefined();\n        });\n    });\n\n    describe('References Provider', () => {\n        it('should find references to functions', async () => {\n            const document = createTestDocument('SUM([Sales]) + SUM([Profit])');\n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const params: ReferenceParams = {\n                textDocument: { uri: document.uri },\n                position: { line: 0, character: 1 }, // On first 'SUM'\n                context: {\n                    includeDeclaration: true\n                }\n            };\n            \n            const references = await provideReferences(params, document);\n            \n            expect(references).toBeDefined();\n            expect(Array.isArray(references)).toBe(true);\n        });\n\n        it('should find references to field names', async () => {\n            const document = createTestDocument('[Sales] + [Sales] * 2');\n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const params: ReferenceParams = {\n                textDocument: { uri: document.uri },\n                position: { line: 0, character: 2 }, // Inside first [Sales]\n                context: {\n                    includeDeclaration: true\n                }\n            };\n            \n            const references = await provideReferences(params, document);\n            \n            expect(references).toBeDefined();\n            expect(Array.isArray(references)).toBe(true);\n        });\n\n        it('should handle references with includeDeclaration false', async () => {\n            const document = createTestDocument('SUM([Sales])');\n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const params: ReferenceParams = {\n                textDocument: { uri: document.uri },\n                position: { line: 0, character: 1 },\n                context: {\n                    includeDeclaration: false\n                }\n            };\n            \n            const references = await provideReferences(params, document);\n            \n            expect(references).toBeDefined();\n            expect(Array.isArray(references)).toBe(true);\n        });\n\n        it('should handle positions with no references', async () => {\n            const document = createTestDocument('SUM([Sales])');\n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const params: ReferenceParams = {\n                textDocument: { uri: document.uri },\n                position: { line: 0, character: 5 }, // On parenthesis\n                context: {\n                    includeDeclaration: true\n                }\n            };\n            \n            const references = await provideReferences(params, document);\n            \n            expect(references).toBeDefined();\n            expect(Array.isArray(references)).toBe(true);\n        });\n    });\n\n    describe('Error Handling', () => {\n        it('should handle malformed documents gracefully', async () => {\n            const document = createTestDocument('IF [Sales] > 100 THEN THEN ELSE');\n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const symbolParams: DocumentSymbolParams = {\n                textDocument: { uri: document.uri }\n            };\n            \n            expect(async () => {\n                const symbols = await documentSymbolProvider(symbolParams, undefined as any);\n                expect(Array.isArray(symbols)).toBe(true);\n            }).not.toThrow();\n        });\n\n        it('should handle non-existent documents', async () => {\n            const params: DocumentSymbolParams = {\n                textDocument: { uri: 'test://nonexistent.twbl' }\n            };\n            \n            const symbols = await documentSymbolProvider(params, undefined as any);\n            \n            expect(symbols).toBeDefined();\n            expect(Array.isArray(symbols)).toBe(true);\n        });\n\n        it('should handle invalid positions in definition requests', async () => {\n            const document = createTestDocument('SUM([Sales])');\n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const params: DefinitionParams = {\n                textDocument: { uri: document.uri },\n                position: { line: -1, character: -1 } // Invalid position\n            };\n            \n            expect(async () => {\n                const definition = await provideDefinition(params, document);\n                expect(definition).toBeDefined();\n            }).not.toThrow();\n        });\n    });\n\n    describe('Performance', () => {\n        it('should handle large documents efficiently', async () => {\n            const largeContent = Array.from({ length: 1000 }, (_, i) => \n                `SUM([Field${i}])`\n            ).join('\\n');\n            \n            const document = createTestDocument(largeContent);\n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const params: DocumentSymbolParams = {\n                textDocument: { uri: document.uri }\n            };\n            \n            const startTime = Date.now();\n            const symbols = await documentSymbolProvider(params, undefined as any);\n            const duration = Date.now() - startTime;\n            \n            expect(symbols).toBeDefined();\n            expect(duration).toBeLessThan(1000); // Should complete within 1 second\n        });\n\n        it('should handle workspace symbol queries efficiently', async () => {\n            // Create multiple documents\n            for (let i = 0; i < 50; i++) {\n                const doc = createTestDocument(`SUM([Field${i}])`, `test://doc${i}.twbl`);\n                IncrementalParser.parseDocumentIncremental(doc);\n            }\n            \n            const params: WorkspaceSymbolParams = {\n                query: 'SUM'\n            };\n            \n            const startTime = Date.now();\n            const symbols = await workspaceSymbolProvider(params, undefined as any);\n            const duration = Date.now() - startTime;\n            \n            expect(symbols).toBeDefined();\n            expect(duration).toBeLessThan(500); // Should be fast even with many documents\n        });\n\n        it('should handle rapid reference requests efficiently', async () => {\n            const document = createTestDocument('SUM([Sales]) + AVG([Sales]) + COUNT([Sales])');\n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const positions = [\n                { line: 0, character: 6 },  // First [Sales]\n                { line: 0, character: 20 }, // Second [Sales]\n                { line: 0, character: 36 }  // Third [Sales]\n            ];\n            \n            const startTime = Date.now();\n            \n            const referencePromises = positions.map(position => \n                provideReferences({\n                    textDocument: { uri: document.uri },\n                    position,\n                    context: { includeDeclaration: true }\n                }, document)\n            );\n            \n            const results = await Promise.all(referencePromises);\n            const duration = Date.now() - startTime;\n            \n            expect(results).toHaveLength(3);\n            results.forEach(refs => expect(Array.isArray(refs)).toBe(true));\n            expect(duration).toBeLessThan(200); // Should handle multiple requests quickly\n        });\n    });\n});\n"