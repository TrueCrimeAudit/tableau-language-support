// src/tests/unit/hoverProvider.test.ts\n\nimport { TextDocument } from 'vscode-languageserver-textdocument';\nimport { Position, Hover } from 'vscode-languageserver';\nimport { provideHover } from '../../hoverProvider';\nimport { FieldParser } from '../../fieldParser';\nimport { parsedDocumentCache } from '../../common';\nimport { IncrementalParser } from '../../incrementalParser';\n\ndescribe('Hover Provider', () => {\n    let fieldParser: FieldParser | null;\n    \n    beforeEach(() => {\n        // Clear cache\n        parsedDocumentCache.clear();\n        \n        // Mock field parser\n        fieldParser = {\n            getFieldInfo: jest.fn().mockReturnValue({\n                name: 'Sales',\n                type: 'Number',\n                description: 'Sales amount in USD'\n            }),\n            findDefinitionFile: jest.fn()\n        } as any;\n    });\n    \n    describe('Function Hover', () => {\n        it('should provide hover information for SUM function', async () => {\n            const document = createTestDocument('SUM([Sales])');\n            const position: Position = { line: 0, character: 1 }; // On 'SUM'\n            \n            // Parse document\n            IncrementalParser.parseDocumentIncremental(document);\n            \n            const params = {\n                textDocument: { uri: document.uri },\n                position\n            };\n            \n            const hover = await provideHover(params, document, fieldParser);\n            \n            expect(hover).toBeDefined();\n            expect(hover?.contents).toBeDefined();\n            \n            const contents = Array.isArray(hover?.contents) ? hover?.contents[0] : hover?.contents;\n            if (typeof contents === 'object' && 'value' in contents) {\n                expect(contents.value).toContain('SUM');\n                expect(contents.value).toContain('aggregate');\n            }\n        });\n        \n        it('should provide hover information for AVG function', async () => {\n            const document = createTestDocument('AVG([Profit])');\n            const position: Position = { line: 0, character: 1 }; // On 'AVG'\n            \n            IncrementalParser.parseDocumentIncremental(document);\n            \n            const params = {\n                textDocument: { uri: document.uri },\n                position\n            };\n            \n            const hover = await provideHover(params, document, fieldParser);\n            \n            expect(hover).toBeDefined();\n            const contents = Array.isArray(hover?.contents) ? hover?.contents[0] : hover?.contents;\n            if (typeof contents === 'object' && 'value' in contents) {\n                expect(contents.value).toContain('AVG');\n                expect(contents.value).toContain('average');\n            }\n        });\n        \n        it('should provide hover information for string functions', async () => {\n            const document = createTestDocument('LEFT([Customer Name], 5)');\n            const position: Position = { line: 0, character: 1 }; // On 'LEFT'\n            \n            IncrementalParser.parseDocumentIncremental(document);\n            \n            const params = {\n                textDocument: { uri: document.uri },\n                position\n            };\n            \n            const hover = await provideHover(params, document, fieldParser);\n            \n            expect(hover).toBeDefined();\n            const contents = Array.isArray(hover?.contents) ? hover?.contents[0] : hover?.contents;\n            if (typeof contents === 'object' && 'value' in contents) {\n                expect(contents.value).toContain('LEFT');\n                expect(contents.value).toContain('string');\n            }\n        });\n        \n        it('should provide hover information for date functions', async () => {\n            const document = createTestDocument('DATEADD(\\'month\\', 1, [Order Date])');\n            const position: Position = { line: 0, character: 3 }; // On 'DATEADD'\n            \n            IncrementalParser.parseDocumentIncremental(document);\n            \n            const params = {\n                textDocument: { uri: document.uri },\n                position\n            };\n            \n            const hover = await provideHover(params, document, fieldParser);\n            \n            expect(hover).toBeDefined();\n            const contents = Array.isArray(hover?.contents) ? hover?.contents[0] : hover?.contents;\n            if (typeof contents === 'object' && 'value' in contents) {\n                expect(contents.value).toContain('DATEADD');\n                expect(contents.value).toContain('date');\n            }\n        });\n    });\n    \n    describe('Field Reference Hover', () => {\n        it('should provide hover information for field references', async () => {\n            const document = createTestDocument('[Sales]');\n            const position: Position = { line: 0, character: 2 }; // Inside [Sales]\n            \n            IncrementalParser.parseDocumentIncremental(document);\n            \n            const params = {\n                textDocument: { uri: document.uri },\n                position\n            };\n            \n            const hover = await provideHover(params, document, fieldParser);\n            \n            expect(hover).toBeDefined();\n            expect(fieldParser?.getFieldInfo).toHaveBeenCalledWith('Sales');\n            \n            const contents = Array.isArray(hover?.contents) ? hover?.contents[0] : hover?.contents;\n            if (typeof contents === 'object' && 'value' in contents) {\n                expect(contents.value).toContain('Sales');\n                expect(contents.value).toContain('Number');\n            }\n        });\n        \n        it('should handle field references with spaces', async () => {\n            const document = createTestDocument('[Customer Name]');\n            const position: Position = { line: 0, character: 5 }; // Inside [Customer Name]\n            \n            (fieldParser?.getFieldInfo as jest.Mock).mockReturnValue({\n                name: 'Customer Name',\n                type: 'String',\n                description: 'Name of the customer'\n            });\n            \n            IncrementalParser.parseDocumentIncremental(document);\n            \n            const params = {\n                textDocument: { uri: document.uri },\n                position\n            };\n            \n            const hover = await provideHover(params, document, fieldParser);\n            \n            expect(hover).toBeDefined();\n            expect(fieldParser?.getFieldInfo).toHaveBeenCalledWith('Customer Name');\n        });\n        \n        it('should handle unknown field references', async () => {\n            const document = createTestDocument('[Unknown Field]');\n            const position: Position = { line: 0, character: 5 };\n            \n            (fieldParser?.getFieldInfo as jest.Mock).mockReturnValue(null);\n            \n            IncrementalParser.parseDocumentIncremental(document);\n            \n            const params = {\n                textDocument: { uri: document.uri },\n                position\n            };\n            \n            const hover = await provideHover(params, document, fieldParser);\n            \n            // Should still provide some hover information\n            expect(hover).toBeDefined();\n        });\n    });\n    \n    describe('Keyword Hover', () => {\n        it('should provide hover information for IF keyword', async () => {\n            const document = createTestDocument('IF [Sales] > 100 THEN \"High\" ELSE \"Low\" END');\n            const position: Position = { line: 0, character: 1 }; // On 'IF'\n            \n            IncrementalParser.parseDocumentIncremental(document);\n            \n            const params = {\n                textDocument: { uri: document.uri },\n                position\n            };\n            \n            const hover = await provideHover(params, document, fieldParser);\n            \n            expect(hover).toBeDefined();\n            const contents = Array.isArray(hover?.contents) ? hover?.contents[0] : hover?.contents;\n            if (typeof contents === 'object' && 'value' in contents) {\n                expect(contents.value).toContain('IF');\n                expect(contents.value).toContain('conditional');\n            }\n        });\n        \n        it('should provide hover information for CASE keyword', async () => {\n            const document = createTestDocument('CASE [Category] WHEN \"Furniture\" THEN 1 ELSE 0 END');\n            const position: Position = { line: 0, character: 2 }; // On 'CASE'\n            \n            IncrementalParser.parseDocumentIncremental(document);\n            \n            const params = {\n                textDocument: { uri: document.uri },\n                position\n            };\n            \n            const hover = await provideHover(params, document, fieldParser);\n            \n            expect(hover).toBeDefined();\n            const contents = Array.isArray(hover?.contents) ? hover?.contents[0] : hover?.contents;\n            if (typeof contents === 'object' && 'value' in contents) {\n                expect(contents.value).toContain('CASE');\n                expect(contents.value).toContain('multiple');\n            }\n        });\n        \n        it('should provide hover information for LOD keywords', async () => {\n            const document = createTestDocument('{ FIXED [Region] : SUM([Sales]) }');\n            const position: Position = { line: 0, character: 3 }; // On 'FIXED'\n            \n            IncrementalParser.parseDocumentIncremental(document);\n            \n            const params = {\n                textDocument: { uri: document.uri },\n                position\n            };\n            \n            const hover = await provideHover(params, document, fieldParser);\n            \n            expect(hover).toBeDefined();\n            const contents = Array.isArray(hover?.contents) ? hover?.contents[0] : hover?.contents;\n            if (typeof contents === 'object' && 'value' in contents) {\n                expect(contents.value).toContain('FIXED');\n                expect(contents.value).toContain('Level of Detail');\n            }\n        });\n    });\n    \n    describe('Complex Expression Hover', () => {\n        it('should provide hover for nested function calls', async () => {\n            const document = createTestDocument('SUM(AVG([Sales]))');\n            const position: Position = { line: 0, character: 5 }; // On inner 'AVG'\n            \n            IncrementalParser.parseDocumentIncremental(document);\n            \n            const params = {\n                textDocument: { uri: document.uri },\n                position\n            };\n            \n            const hover = await provideHover(params, document, fieldParser);\n            \n            expect(hover).toBeDefined();\n            const contents = Array.isArray(hover?.contents) ? hover?.contents[0] : hover?.contents;\n            if (typeof contents === 'object' && 'value' in contents) {\n                expect(contents.value).toContain('AVG');\n            }\n        });\n        \n        it('should provide hover for complex IF expressions', async () => {\n            const document = createTestDocument(`\n                IF [Sales] > 1000 THEN\n                    \"High Sales\"\n                ELSEIF [Sales] > 500 THEN\n                    \"Medium Sales\"\n                ELSE\n                    \"Low Sales\"\n                END\n            `);\n            const position: Position = { line: 1, character: 19 }; // On 'IF'\n            \n            IncrementalParser.parseDocumentIncremental(document);\n            \n            const params = {\n                textDocument: { uri: document.uri },\n                position\n            };\n            \n            const hover = await provideHover(params, document, fieldParser);\n            \n            expect(hover).toBeDefined();\n        });\n        \n        it('should provide hover for LOD expressions', async () => {\n            const document = createTestDocument('{ INCLUDE [Category] : AVG([Profit]) }');\n            const position: Position = { line: 0, character: 25 }; // On 'AVG' inside LOD\n            \n            IncrementalParser.parseDocumentIncremental(document);\n            \n            const params = {\n                textDocument: { uri: document.uri },\n                position\n            };\n            \n            const hover = await provideHover(params, document, fieldParser);\n            \n            expect(hover).toBeDefined();\n        });\n    });\n    \n    describe('Edge Cases', () => {\n        it('should handle hover at document boundaries', async () => {\n            const document = createTestDocument('SUM([Sales])');\n            const position: Position = { line: 0, character: 0 }; // At start\n            \n            IncrementalParser.parseDocumentIncremental(document);\n            \n            const params = {\n                textDocument: { uri: document.uri },\n                position\n            };\n            \n            const hover = await provideHover(params, document, fieldParser);\n            \n            // Should handle gracefully\n            expect(hover).toBeDefined();\n        });\n        \n        it('should handle hover beyond document end', async () => {\n            const document = createTestDocument('SUM([Sales])');\n            const position: Position = { line: 0, character: 100 }; // Beyond end\n            \n            IncrementalParser.parseDocumentIncremental(document);\n            \n            const params = {\n                textDocument: { uri: document.uri },\n                position\n            };\n            \n            const hover = await provideHover(params, document, fieldParser);\n            \n            // Should handle gracefully\n            expect(hover).toBeDefined();\n        });\n        \n        it('should handle empty documents', async () => {\n            const document = createTestDocument('');\n            const position: Position = { line: 0, character: 0 };\n            \n            IncrementalParser.parseDocumentIncremental(document);\n            \n            const params = {\n                textDocument: { uri: document.uri },\n                position\n            };\n            \n            const hover = await provideHover(params, document, fieldParser);\n            \n            expect(hover).toBeNull();\n        });\n        \n        it('should handle malformed expressions', async () => {\n            const document = createTestDocument('SUM([Sales] +');\n            const position: Position = { line: 0, character: 1 }; // On 'SUM'\n            \n            IncrementalParser.parseDocumentIncremental(document);\n            \n            const params = {\n                textDocument: { uri: document.uri },\n                position\n            };\n            \n            const hover = await provideHover(params, document, fieldParser);\n            \n            // Should still provide hover for the function\n            expect(hover).toBeDefined();\n        });\n        \n        it('should handle hover without field parser', async () => {\n            const document = createTestDocument('[Sales]');\n            const position: Position = { line: 0, character: 2 };\n            \n            IncrementalParser.parseDocumentIncremental(document);\n            \n            const params = {\n                textDocument: { uri: document.uri },\n                position\n            };\n            \n            const hover = await provideHover(params, document, null);\n            \n            // Should handle gracefully without field parser\n            expect(hover).toBeDefined();\n        });\n    });\n    \n    describe('Performance', () => {\n        it('should provide hover quickly for large documents', async () => {\n            const largeContent = Array.from({ length: 100 }, (_, i) => \n                `SUM([Field${i}]) + AVG([Other${i}])`\n            ).join('\\n');\n            \n            const document = createTestDocument(largeContent);\n            const position: Position = { line: 50, character: 1 }; // Middle of document\n            \n            IncrementalParser.parseDocumentIncremental(document);\n            \n            const params = {\n                textDocument: { uri: document.uri },\n                position\n            };\n            \n            const startTime = Date.now();\n            const hover = await provideHover(params, document, fieldParser);\n            const duration = Date.now() - startTime;\n            \n            expect(hover).toBeDefined();\n            expect(duration).toBeLessThan(100); // Should be fast\n        });\n        \n        it('should handle multiple rapid hover requests', async () => {\n            const document = createTestDocument('SUM([Sales]) + AVG([Profit]) + COUNT([Orders])');\n            \n            IncrementalParser.parseDocumentIncremental(document);\n            \n            const positions = [\n                { line: 0, character: 1 },  // SUM\n                { line: 0, character: 16 }, // AVG\n                { line: 0, character: 32 }  // COUNT\n            ];\n            \n            const startTime = Date.now();\n            const hovers = await Promise.all(\n                positions.map(position => \n                    provideHover(\n                        { textDocument: { uri: document.uri }, position },\n                        document,\n                        fieldParser\n                    )\n                )\n            );\n            const duration = Date.now() - startTime;\n            \n            expect(hovers).toHaveLength(3);\n            hovers.forEach(hover => expect(hover).toBeDefined());\n            expect(duration).toBeLessThan(200); // Should handle multiple requests quickly\n        });\n    });\n});\n\n/**\n * Helper function to create test documents\n */\nfunction createTestDocument(\n    content: string, \n    version: number = 1, \n    uri: string = 'test://test.twbl'\n): TextDocument {\n    return TextDocument.create(uri, 'tableau', version, content);\n}\n"