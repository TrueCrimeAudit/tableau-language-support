// src/tests/unit/signatureProvider.test.ts\n\nimport { TextDocument } from 'vscode-languageserver-textdocument';\nimport { Position, SignatureHelp } from 'vscode-languageserver';\nimport { buildSignatureHelp } from '../../signatureProvider';\nimport { parsedDocumentCache } from '../../common';\nimport { IncrementalParser } from '../../incrementalParser';\n\ndescribe('Signature Help Provider', () => {\n    beforeEach(() => {\n        // Clear cache\n        parsedDocumentCache.clear();\n    });\n    \n    describe('Function Signature Help', () => {\n        it('should provide signature help for SUM function', async () => {\n            const document = createTestDocument('SUM(');\n            const position: Position = { line: 0, character: 4 }; // After opening parenthesis\n            \n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const signatureHelp = buildSignatureHelp(document, position, parsedDoc);\n            \n            expect(signatureHelp).toBeDefined();\n            expect(signatureHelp?.signatures).toBeDefined();\n            expect(signatureHelp?.signatures.length).toBeGreaterThan(0);\n            \n            const signature = signatureHelp?.signatures[0];\n            expect(signature?.label).toContain('SUM');\n            expect(signature?.parameters).toBeDefined();\n            expect(signature?.parameters?.length).toBeGreaterThan(0);\n        });\n        \n        it('should provide signature help for AVG function', async () => {\n            const document = createTestDocument('AVG([Sales]');\n            const position: Position = { line: 0, character: 11 }; // After [Sales]\n            \n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const signatureHelp = buildSignatureHelp(document, position, parsedDoc);\n            \n            expect(signatureHelp).toBeDefined();\n            expect(signatureHelp?.signatures[0]?.label).toContain('AVG');\n            expect(signatureHelp?.activeParameter).toBe(0); // First parameter\n        });\n        \n        it('should provide signature help for string functions', async () => {\n            const document = createTestDocument('LEFT([Customer Name], ');\n            const position: Position = { line: 0, character: 22 }; // After comma\n            \n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const signatureHelp = buildSignatureHelp(document, position, parsedDoc);\n            \n            expect(signatureHelp).toBeDefined();\n            expect(signatureHelp?.signatures[0]?.label).toContain('LEFT');\n            expect(signatureHelp?.activeParameter).toBe(1); // Second parameter\n            \n            const signature = signatureHelp?.signatures[0];\n            expect(signature?.parameters?.length).toBe(2);\n        });\n        \n        it('should provide signature help for date functions', async () => {\n            const document = createTestDocument('DATEADD(\\'month\\', 1, ');\n            const position: Position = { line: 0, character: 18 }; // After second comma\n            \n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const signatureHelp = buildSignatureHelp(document, position, parsedDoc);\n            \n            expect(signatureHelp).toBeDefined();\n            expect(signatureHelp?.signatures[0]?.label).toContain('DATEADD');\n            expect(signatureHelp?.activeParameter).toBe(2); // Third parameter\n        });\n        \n        it('should provide signature help for math functions', async () => {\n            const document = createTestDocument('ROUND([Sales], ');\n            const position: Position = { line: 0, character: 15 }; // After comma\n            \n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const signatureHelp = buildSignatureHelp(document, position, parsedDoc);\n            \n            expect(signatureHelp).toBeDefined();\n            expect(signatureHelp?.signatures[0]?.label).toContain('ROUND');\n            expect(signatureHelp?.activeParameter).toBe(1); // Second parameter\n        });\n    });\n    \n    describe('Multi-Signature Functions', () => {\n        it('should provide multiple signatures for MIN function', async () => {\n            const document = createTestDocument('MIN(');\n            const position: Position = { line: 0, character: 4 };\n            \n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const signatureHelp = buildSignatureHelp(document, position, parsedDoc);\n            \n            expect(signatureHelp).toBeDefined();\n            expect(signatureHelp?.signatures.length).toBeGreaterThanOrEqual(1);\n            \n            // MIN can be aggregate MIN([Field]) or row-level MIN(a, b)\n            const signature = signatureHelp?.signatures[0];\n            expect(signature?.label).toContain('MIN');\n        });\n        \n        it('should provide multiple signatures for MAX function', async () => {\n            const document = createTestDocument('MAX([Sales], ');\n            const position: Position = { line: 0, character: 13 };\n            \n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const signatureHelp = buildSignatureHelp(document, position, parsedDoc);\n            \n            expect(signatureHelp).toBeDefined();\n            expect(signatureHelp?.activeParameter).toBe(1);\n        });\n        \n        it('should handle IIF function with optional parameter', async () => {\n            const document = createTestDocument('IIF([Sales] > 100, \"High\", ');\n            const position: Position = { line: 0, character: 28 };\n            \n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const signatureHelp = buildSignatureHelp(document, position, parsedDoc);\n            \n            expect(signatureHelp).toBeDefined();\n            expect(signatureHelp?.signatures[0]?.label).toContain('IIF');\n            expect(signatureHelp?.activeParameter).toBe(2); // Third parameter\n        });\n    });\n    \n    describe('Nested Function Calls', () => {\n        it('should provide signature help for outer function', async () => {\n            const document = createTestDocument('SUM(AVG([Sales]), ');\n            const position: Position = { line: 0, character: 18 }; // After comma in SUM\n            \n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const signatureHelp = buildSignatureHelp(document, position, parsedDoc);\n            \n            expect(signatureHelp).toBeDefined();\n            expect(signatureHelp?.signatures[0]?.label).toContain('SUM');\n            expect(signatureHelp?.activeParameter).toBe(1); // Second parameter of SUM\n        });\n        \n        it('should provide signature help for inner function', async () => {\n            const document = createTestDocument('SUM(AVG([Sales]');\n            const position: Position = { line: 0, character: 15 }; // Inside AVG call\n            \n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const signatureHelp = buildSignatureHelp(document, position, parsedDoc);\n            \n            expect(signatureHelp).toBeDefined();\n            expect(signatureHelp?.signatures[0]?.label).toContain('AVG');\n            expect(signatureHelp?.activeParameter).toBe(0); // First parameter of AVG\n        });\n        \n        it('should handle deeply nested function calls', async () => {\n            const document = createTestDocument('ROUND(SUM(AVG([Sales])), ');\n            const position: Position = { line: 0, character: 25 }; // Second parameter of ROUND\n            \n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const signatureHelp = buildSignatureHelp(document, position, parsedDoc);\n            \n            expect(signatureHelp).toBeDefined();\n            expect(signatureHelp?.signatures[0]?.label).toContain('ROUND');\n            expect(signatureHelp?.activeParameter).toBe(1);\n        });\n    });\n    \n    describe('Conditional Expression Signatures', () => {\n        it('should provide signature help for IF expressions', async () => {\n            const document = createTestDocument('IF [Sales] > 100 THEN ');\n            const position: Position = { line: 0, character: 22 }; // After THEN\n            \n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const signatureHelp = buildSignatureHelp(document, position, parsedDoc);\n            \n            expect(signatureHelp).toBeDefined();\n            // Should provide context about IF structure\n            expect(signatureHelp?.signatures[0]?.label).toContain('IF');\n        });\n        \n        it('should provide signature help for CASE expressions', async () => {\n            const document = createTestDocument('CASE [Category] WHEN ');\n            const position: Position = { line: 0, character: 21 }; // After WHEN\n            \n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const signatureHelp = buildSignatureHelp(document, position, parsedDoc);\n            \n            expect(signatureHelp).toBeDefined();\n            expect(signatureHelp?.signatures[0]?.label).toContain('CASE');\n        });\n    });\n    \n    describe('LOD Expression Signatures', () => {\n        it('should provide signature help for FIXED expressions', async () => {\n            const document = createTestDocument('{ FIXED [Region] : ');\n            const position: Position = { line: 0, character: 19 }; // After colon\n            \n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const signatureHelp = buildSignatureHelp(document, position, parsedDoc);\n            \n            expect(signatureHelp).toBeDefined();\n            expect(signatureHelp?.signatures[0]?.label).toContain('FIXED');\n        });\n        \n        it('should provide signature help for INCLUDE expressions', async () => {\n            const document = createTestDocument('{ INCLUDE [Category] : SUM(');\n            const position: Position = { line: 0, character: 28 }; // Inside SUM in LOD\n            \n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const signatureHelp = buildSignatureHelp(document, position, parsedDoc);\n            \n            expect(signatureHelp).toBeDefined();\n            expect(signatureHelp?.signatures[0]?.label).toContain('SUM');\n        });\n        \n        it('should provide signature help for EXCLUDE expressions', async () => {\n            const document = createTestDocument('{ EXCLUDE [Sub-Category] : AVG([Profit]) }');\n            const position: Position = { line: 0, character: 35 }; // Inside AVG\n            \n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const signatureHelp = buildSignatureHelp(document, position, parsedDoc);\n            \n            expect(signatureHelp).toBeDefined();\n            expect(signatureHelp?.signatures[0]?.label).toContain('AVG');\n        });\n    });\n    \n    describe('Parameter Highlighting', () => {\n        it('should highlight correct parameter in multi-parameter function', async () => {\n            const document = createTestDocument('DATEADD(\\'month\\', 1, [Order Date]');\n            const position: Position = { line: 0, character: 30 }; // In third parameter\n            \n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const signatureHelp = buildSignatureHelp(document, position, parsedDoc);\n            \n            expect(signatureHelp).toBeDefined();\n            expect(signatureHelp?.activeParameter).toBe(2); // Third parameter (0-indexed)\n            \n            const signature = signatureHelp?.signatures[0];\n            expect(signature?.parameters?.length).toBe(3);\n        });\n        \n        it('should handle parameter highlighting with nested calls', async () => {\n            const document = createTestDocument('LEFT(UPPER([Customer Name]), 5');\n            const position: Position = { line: 0, character: 31 }; // Second parameter of LEFT\n            \n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const signatureHelp = buildSignatureHelp(document, position, parsedDoc);\n            \n            expect(signatureHelp).toBeDefined();\n            expect(signatureHelp?.signatures[0]?.label).toContain('LEFT');\n            expect(signatureHelp?.activeParameter).toBe(1);\n        });\n        \n        it('should handle parameter highlighting with string literals', async () => {\n            const document = createTestDocument('REPLACE([Customer Name], \"Corp\", ');\n            const position: Position = { line: 0, character: 34 }; // Third parameter\n            \n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const signatureHelp = buildSignatureHelp(document, position, parsedDoc);\n            \n            expect(signatureHelp).toBeDefined();\n            expect(signatureHelp?.activeParameter).toBe(2);\n        });\n    });\n    \n    describe('Edge Cases', () => {\n        it('should handle signature help at function start', async () => {\n            const document = createTestDocument('SUM');\n            const position: Position = { line: 0, character: 3 }; // At end of function name\n            \n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const signatureHelp = buildSignatureHelp(document, position, parsedDoc);\n            \n            // May or may not provide signature help depending on implementation\n            // Should not throw error\n            expect(signatureHelp).toBeDefined();\n        });\n        \n        it('should handle malformed function calls', async () => {\n            const document = createTestDocument('SUM([Sales],, ');\n            const position: Position = { line: 0, character: 14 }; // After double comma\n            \n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const signatureHelp = buildSignatureHelp(document, position, parsedDoc);\n            \n            // Should handle gracefully\n            expect(signatureHelp).toBeDefined();\n        });\n        \n        it('should handle unclosed function calls', async () => {\n            const document = createTestDocument('SUM([Sales]');\n            const position: Position = { line: 0, character: 11 }; // Missing closing parenthesis\n            \n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const signatureHelp = buildSignatureHelp(document, position, parsedDoc);\n            \n            expect(signatureHelp).toBeDefined();\n            expect(signatureHelp?.signatures[0]?.label).toContain('SUM');\n        });\n        \n        it('should handle unknown functions', async () => {\n            const document = createTestDocument('UNKNOWN_FUNCTION(');\n            const position: Position = { line: 0, character: 17 };\n            \n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const signatureHelp = buildSignatureHelp(document, position, parsedDoc);\n            \n            // Should handle gracefully, may return null or empty\n            expect(signatureHelp).toBeDefined();\n        });\n        \n        it('should handle position outside function calls', async () => {\n            const document = createTestDocument('SUM([Sales]) + AVG([Profit])');\n            const position: Position = { line: 0, character: 13 }; // On the '+' operator\n            \n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const signatureHelp = buildSignatureHelp(document, position, parsedDoc);\n            \n            // Should return null or empty when not in function call\n            expect(signatureHelp).toBeNull();\n        });\n        \n        it('should handle empty documents', async () => {\n            const document = createTestDocument('');\n            const position: Position = { line: 0, character: 0 };\n            \n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const signatureHelp = buildSignatureHelp(document, position, parsedDoc);\n            \n            expect(signatureHelp).toBeNull();\n        });\n    });\n    \n    describe('Performance', () => {\n        it('should provide signature help quickly', async () => {\n            const document = createTestDocument('SUM([Sales], AVG([Profit]), COUNT([Orders])');\n            const position: Position = { line: 0, character: 25 }; // Second parameter\n            \n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const startTime = Date.now();\n            const signatureHelp = buildSignatureHelp(document, position, parsedDoc);\n            const duration = Date.now() - startTime;\n            \n            expect(signatureHelp).toBeDefined();\n            expect(duration).toBeLessThan(50); // Should be very fast\n        });\n        \n        it('should handle complex nested expressions efficiently', async () => {\n            const complexExpression = `\n                ROUND(\n                    SUM(\n                        IF [Category] = \"Furniture\" THEN\n                            AVG([Sales]) * 1.1\n                        ELSE\n                            AVG([Sales])\n                        END\n                    ),\n                    2\n                )\n            `;\n            \n            const document = createTestDocument(complexExpression);\n            const position: Position = { line: 9, character: 20 }; // Second parameter of ROUND\n            \n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const startTime = Date.now();\n            const signatureHelp = buildSignatureHelp(document, position, parsedDoc);\n            const duration = Date.now() - startTime;\n            \n            expect(signatureHelp).toBeDefined();\n            expect(duration).toBeLessThan(100);\n        });\n        \n        it('should handle multiple rapid signature requests', async () => {\n            const document = createTestDocument('DATEADD(\\'month\\', 1, [Order Date])');\n            \n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const positions = [\n                { line: 0, character: 8 },  // First parameter\n                { line: 0, character: 18 }, // Second parameter\n                { line: 0, character: 25 }  // Third parameter\n            ];\n            \n            const startTime = Date.now();\n            const signatureHelps = positions.map(position => \n                buildSignatureHelp(document, position, parsedDoc)\n            );\n            const duration = Date.now() - startTime;\n            \n            expect(signatureHelps).toHaveLength(3);\n            signatureHelps.forEach(help => expect(help).toBeDefined());\n            expect(duration).toBeLessThan(100);\n        });\n    });\n    \n    describe('Signature Information Quality', () => {\n        it('should provide detailed parameter information', async () => {\n            const document = createTestDocument('DATEADD(');\n            const position: Position = { line: 0, character: 8 };\n            \n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const signatureHelp = buildSignatureHelp(document, position, parsedDoc);\n            \n            expect(signatureHelp).toBeDefined();\n            \n            const signature = signatureHelp?.signatures[0];\n            expect(signature?.parameters).toBeDefined();\n            expect(signature?.parameters?.length).toBe(3);\n            \n            // Parameters should have labels and documentation\n            signature?.parameters?.forEach(param => {\n                expect(param.label).toBeDefined();\n                expect(typeof param.label).toBe('string');\n            });\n        });\n        \n        it('should provide function documentation', async () => {\n            const document = createTestDocument('SUM(');\n            const position: Position = { line: 0, character: 4 };\n            \n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const signatureHelp = buildSignatureHelp(document, position, parsedDoc);\n            \n            expect(signatureHelp).toBeDefined();\n            \n            const signature = signatureHelp?.signatures[0];\n            expect(signature?.documentation).toBeDefined();\n            \n            if (typeof signature?.documentation === 'object' && signature.documentation && 'value' in signature.documentation) {\n                expect(signature.documentation.value).toContain('SUM');\n            }\n        });\n        \n        it('should indicate active signature for overloaded functions', async () => {\n            const document = createTestDocument('MIN([Sales], [Profit]');\n            const position: Position = { line: 0, character: 21 };\n            \n            const parsedDoc = IncrementalParser.parseDocumentIncremental(document);\n            \n            const signatureHelp = buildSignatureHelp(document, position, parsedDoc);\n            \n            expect(signatureHelp).toBeDefined();\n            expect(signatureHelp?.activeSignature).toBeDefined();\n            expect(typeof signatureHelp?.activeSignature).toBe('number');\n        });\n    });\n});\n\n/**\n * Helper function to create test documents\n */\nfunction createTestDocument(\n    content: string, \n    version: number = 1, \n    uri: string = 'test://test.twbl'\n): TextDocument {\n    return TextDocument.create(uri, 'tableau', version, content);\n}\n"