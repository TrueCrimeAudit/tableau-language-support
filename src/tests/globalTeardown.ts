// src/tests/globalTeardown.ts\n\nimport * as fs from 'fs';\nimport * as path from 'path';\n\n/**\n * Global teardown for all tests\n * This runs once after all test suites complete\n */\nexport default async function globalTeardown(): Promise<void> {\n    console.log('üßπ Starting test cleanup');\n    \n    // Clean up temporary test files\n    await cleanupTestFiles();\n    \n    // Generate test summary\n    await generateTestSummary();\n    \n    // Log completion\n    console.log('‚úÖ Test cleanup completed');\n    console.log('üìä Test results available in ./test-results/');\n    console.log('üìà Coverage report available in ./coverage/');\n}\n\n/**\n * Clean up temporary files created during testing\n */\nasync function cleanupTestFiles(): Promise<void> {\n    const tempDirs = [\n        path.join(__dirname, 'temp'),\n        path.join(__dirname, 'fixtures/temp')\n    ];\n    \n    for (const dir of tempDirs) {\n        if (fs.existsSync(dir)) {\n            try {\n                fs.rmSync(dir, { recursive: true, force: true });\n                console.log(`üóëÔ∏è  Cleaned up temporary directory: ${dir}`);\n            } catch (error) {\n                console.warn(`‚ö†Ô∏è  Failed to clean up ${dir}:`, error);\n            }\n        }\n    }\n}\n\n/**\n * Generate a test execution summary\n */\nasync function generateTestSummary(): Promise<void> {\n    const summaryPath = path.join(__dirname, '../test-results/test-summary.json');\n    \n    const summary = {\n        timestamp: new Date().toISOString(),\n        environment: {\n            nodeVersion: process.version,\n            platform: process.platform,\n            arch: process.arch,\n            testEnvironment: process.env.NODE_ENV\n        },\n        configuration: {\n            testTimeout: process.env.TEST_TIMEOUT,\n            maxWorkers: '50%',\n            collectCoverage: true\n        },\n        testSuites: {\n            unit: 'src/tests/unit/**/*.test.ts',\n            integration: 'src/tests/integration/**/*.test.ts',\n            performance: 'src/tests/performance/**/*.test.ts',\n            edge: 'src/tests/edge/**/*.test.ts'\n        },\n        coverageThresholds: {\n            global: {\n                branches: 80,\n                functions: 80,\n                lines: 80,\n                statements: 80\n            }\n        },\n        artifacts: {\n            coverageReport: './coverage/index.html',\n            junitReport: './test-results/junit.xml',\n            htmlReport: './test-results/test-report.html'\n        }\n    };\n    \n    try {\n        const resultsDir = path.dirname(summaryPath);\n        if (!fs.existsSync(resultsDir)) {\n            fs.mkdirSync(resultsDir, { recursive: true });\n        }\n        \n        fs.writeFileSync(summaryPath, JSON.stringify(summary, null, 2), 'utf8');\n        console.log('üìã Test summary generated');\n    } catch (error) {\n        console.warn('‚ö†Ô∏è  Failed to generate test summary:', error);\n    }\n}\n"